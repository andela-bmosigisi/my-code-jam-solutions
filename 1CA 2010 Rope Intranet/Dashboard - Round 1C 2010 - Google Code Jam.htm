<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head><meta http-equiv="refresh" content="172795">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>
    Dashboard - Round 1C 2010 - Google Code Jam
  </title>
  <link rel="stylesheet" type="text/css" href="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/base.css">
  <link rel="stylesheet" type="text/css" href="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/dashboard.css">
  
  <script src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript" src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/Dashboard_en.js"></script>
  
  <script type="text/javascript"><!--
    /**
     * Initializes GCJ.problems and GCJ.io from Django parameters.
     * Also initializes the two user specific variables GCJ.isQualified and
     * GCJ.lastClarSeenTime.
     * This is the first function called once from GCJ.main().
     */
    GCJ.initContestVariables = function () {
      // Convert Django's 'contest' to 'GCJ.contest'.
      GCJ.contest.id = "619102";
      GCJ.contest.name = "Round 1C 2010";
      GCJ.contest.version = 0;
      
        GCJ.contest.version = 3;
      
      GCJ.contest.start_int = 1274605200;
      GCJ.contest.running = false;
      GCJ.base_url = '/codejam/contest';
      GCJ.scoreboardLink = ('<a target="new"' +
                            'href="scoreboard?c=619102"' +
                            '>Contest scoreboard</a>');
    }

    /**
     * Returns the current splash page.
     */
    GCJ.getSplashPage = function () {
      return "/codejam";
    };
  //--></script>
</head>

<body onload="GCJ.main()">

<div id="logo-div">
  <a href="http://code.google.com/codejam/">
    <img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/logo_image4.gif" id="logo" alt="Google Code Jam">
  </a>
</div>

<div>

<div id="dsb-page-body">

<div id="left-panel">
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <!-- Problem Selection Panel -->
  <div id="dsb-contest-title">Round 1C 2010</div>
  <hr class="dsb-hr">
  <div id="dsb-problem-selection-area">
    <div style="display: block;" id="dsb-problem-selection-list" class="after-start-only">
    <div><div id="dsb-problem-tab0" class="dsb-problem-tab-open" tabindex="0" role="button">  <div id="dsb-problem-title0" class="dynamic-link">A. Rope Intranet  </div></div></div><div><div id="dsb-problem-tab1" class="dsb-problem-tab-close" tabindex="0" role="button">  <div id="dsb-problem-title1" class="dynamic-link">B. Load Testing  </div></div></div><div><div id="dsb-problem-tab2" class="dsb-problem-tab-close" tabindex="0" role="button">  <div id="dsb-problem-title2" class="dynamic-link">C. Making Chess Boards  </div></div></div></div>
    <div style="display: none;" id="dsb-problem-selection-list-pre-contest" class="dsb-pre-contest-text before-start-only">
      
      The list of problems will appear here after the contest loads.
      
    </div>
  </div>
  <hr class="dsb-hr">
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div style="display: block;" id="dsb-analysis-button" class="dsb-analysis-tab-close" tabindex="0" role="button">
    <div class="dynamic-link">
       <div id="dsb-analysis-tab">
         Contest Analysis
       </div>
    </div>
  </div>
  <div id="dsb-ask-question-area">
    <div style="display: block;" id="dsb-ask-question-button" class="dsb-clar-tab-close" tabindex="0" role="button">
      <div class="dynamic-link">
        <div class="" id="dsb-ask-question-tab">Questions asked</div>
      </div>
    </div>
    <div style="display: none;" class="dsb-pre-contest-text before-start-only">
      
      You'll be able to ask questions about the problems, and view your
      submissions, here.
      
    </div>
  </div>
  <div style="display: none;" id="dsb-submissions-button" class="dsb-submissions-tab-close" tabindex="0" role="button">
    <div class="dynamic-link">
      <div id="dsb-submissions-tab">
        View my submissions
      </div>
    </div>
  </div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div class="dsb-mini-tab-wrapper">
  <div id="dsb-status-div-container">
    <div id="dsb-status-header-div" onmouseover="this.style.cursor='pointer'" onclick="GCJ.toggleStatusPanelVisibility();">
      <img id="dsb-status-panel-button" src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/minus.gif">
      &nbsp; Submissions
    </div>
    <div style="display: block;" id="dsb-status-tab" class="after-start-only">
      <div style="display: none;" id="dsb-status-tab-loading-text" class="dsb-pre-contest-text">
        Loading...
      </div>
    <div style="display: block;" id="dsb-status-tab-problems"><div><div id="dsb-problem-status-wrapper0" class="problem-status-wrapper">  <div class="dsb-status-problem-title">Rope Intranet</div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName0_0" class="inputName">9pt</td>      <td class="status">        <div id="selfStat0_0" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat0_0" class="globalStat"><b>2989/3075 users</b> correct (97%)</div>      </td>    </tr>  </tbody></table></div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName0_1" class="inputName">13pt</td>      <td class="status">        <div id="selfStat0_1" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat0_1" class="globalStat"><b>2662/2973 users</b> correct (90%)</div>      </td>    </tr>  </tbody></table></div></div></div><div><div id="dsb-problem-status-wrapper1" class="problem-status-wrapper">  <div class="dsb-status-problem-title">Load Testing</div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName1_0" class="inputName">14pt</td>      <td class="status">        <div id="selfStat1_0" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat1_0" class="globalStat"><b>1060/1468 users</b> correct (72%)</div>      </td>    </tr>  </tbody></table></div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName1_1" class="inputName">22pt</td>      <td class="status">        <div id="selfStat1_1" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat1_1" class="globalStat"><b>829/1020 users</b> correct (81%)</div>      </td>    </tr>  </tbody></table></div></div></div><div><div id="dsb-problem-status-wrapper2" class="problem-status-wrapper">  <div class="dsb-status-problem-title">Making Chess Boards</div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName2_0" class="inputName">18pt</td>      <td class="status">        <div id="selfStat2_0" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat2_0" class="globalStat"><b>640/836 users</b> correct (77%)</div>      </td>    </tr>  </tbody></table></div><div><table class="problemStatus">  <tbody>    <tr class="inputSetStatus">      <td id="inputName2_1" class="inputName">24pt</td>      <td class="status">        <div id="selfStat2_1" class="dsb-mini-status-non-highlight">Not attempted</div>        <div style="display: block;" id="globalStat2_1" class="globalStat"><b>226/547 users</b> correct (41%)</div>      </td>    </tr>  </tbody></table></div></div></div></div></div>
    <div style="display: none;" id="dsb-status-tab-pre-contest" class="dsb-pre-contest-text before-start-only">
      
      Statistics about the problems will appear here.  They'll include your
      status on each problem, and other contestants' attempts.
      
    </div>
  </div>
  </div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <!-- Mini Scoreboard -->
  <div class="dsb-mini-tab-wrapper">
    <div id="dsb-scoreboard-div">
      <div style="cursor: pointer;" id="dsb-scoreboard-header-div" onmouseover="this.style.cursor='pointer'" onclick="GCJ.toggleVisibility(
              'dsb-scoreboard-table',
              'dsb-scoreboard-panel-button',
              '/codejam/contest/static/minus.gif',
              '/codejam/contest/static/plus.gif')">
          <img id="dsb-scoreboard-panel-button" src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/minus.gif">
          &nbsp; Top Scores
      </div>
      <div style="display: block;" id="dsb-scoreboard-table-wrap" class="after-start-only"><table id="dsb-scoreboard-table"><tbody><tr class="dsb-scoreboard-row-even" id="sbRow_0" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_0">ZhukovDmitry</td><td class="dsb-score-td" id="sbScore_0">100</td></tr><tr class="dsb-scoreboard-row-odd" id="sbRow_1" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_1">darnley</td><td class="dsb-score-td" id="sbScore_1">100</td></tr><tr class="dsb-scoreboard-row-even" id="sbRow_2" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_2">aytawgf</td><td class="dsb-score-td" id="sbScore_2">100</td></tr><tr class="dsb-scoreboard-row-odd" id="sbRow_3" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_3">xdliutao</td><td class="dsb-score-td" id="sbScore_3">100</td></tr><tr class="dsb-scoreboard-row-even" id="sbRow_4" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_4">Onufry</td><td class="dsb-score-td" id="sbScore_4">100</td></tr><tr class="dsb-scoreboard-row-odd" id="sbRow_5" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_5">Clann</td><td class="dsb-score-td" id="sbScore_5">100</td></tr><tr class="dsb-scoreboard-row-even" id="sbRow_6" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_6">SergeiFedorov</td><td class="dsb-score-td" id="sbScore_6">100</td></tr><tr class="dsb-scoreboard-row-odd" id="sbRow_7" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_7">kubus</td><td class="dsb-score-td" id="sbScore_7">100</td></tr><tr class="dsb-scoreboard-row-even" id="sbRow_8" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_8">K.A.D.R</td><td class="dsb-score-td" id="sbScore_8">100</td></tr><tr class="dsb-scoreboard-row-odd" id="sbRow_9" style="display: block;"><td title="null" class="dsb-name-td" id="sbName_9">Murphy</td><td class="dsb-score-td" id="sbScore_9">100</td></tr></tbody></table></div>
      <div style="display: none;" id="dsb-scoreboard-tab-pre-contest" class="dsb-pre-contest-text before-start-only">
        
        The scores of the top 10 contestants will appear here, with a link to
        the contest's scoreboard.
        
      </div>
      <div class="dsb-mini-tab-link">
      </div>
    </div>
  </div>
</div>

<div id="right-panel">
  <div style="visibility: hidden;" id="dsb-status-msg-wrapper" class="dsb-status-msg-wrapper" role="alert">
    <div id="dsb-status-msg" class="dsb-status-msg">
      <span id="dsb-status-msg-text">Loading problem information...</span>
      <span style="display: none;" id="dsb-view-sub-link">View submissions.</span>
    </div>
  </div>

  <div id="dsb-contest-title-bar">
    <div id="dsb-rank-etc">
      <span id="dsb-time-remaining">Practice Mode</span>
      <span style="display: inline;" class="after-start-only-inline">
        <span style="display: none;" id="dsb-current-rank-div">
          Rank: <span id="dsb-current-rank-span">--</span>
        </span>
        <span style="display: none;" id="dsb-current-score-div">
          Score: <span id="dsb-current-score-span">--</span>
        </span>
      </span>
    </div>
    <div id="dsb-title-links"><a target="new" href="http://code.google.com/codejam/contest/619102/scoreboard?c=619102">Contest scoreboard</a> | <a href="https://www.google.com/accounts/ServiceLogin?service=ah&amp;passive=true&amp;continue=https://appengine.google.com/_ah/conflogin%3Fcontinue%3Dhttp://code.google.com/codejam/contest/dashboard%253Fc%253D619102&amp;ltmpl=">Sign in</a></div>
  </div>
  <!-- Problem Statement -->
  <div id="main-panel-border" class="dsb-blue-border">
  <div id="dsb-border-inner">
   <!-- Problem Title -->
    <h3 id="dsb-problem-title-area">
      <span style="display: none;" id="dsb-problem-title-div-pre-contest" class="problem-title before-start-only">
        <span style="color:#666">Problem.</span>
        The problem's name goes here.
      </span>
      <span style="display: block;" id="dsb-problem-title-div" class="problem-title after-start-only"><span style="color:#666">Problem A.</span> Rope Intranet</span>
    </h3>

    <div style="display: none;" class="dsb-content-pages before-start-only">
      
      We're now waiting for the contest to start.  Once the contest starts,
      the problems will automatically load, and Problem A will display here.
      You don't have to solve that problem first; you will be able to select
      another problem from the list to the left.  Once you've solved one
      problem, don't forget to work on the others!
      
    </div>

    <div id="dsb-problem-pages"><div style="display: block;" class="dsb-content-pages" id="dsb-problem-page0"><!-- Problem Input File Selection --><div class="dsb-input-panel-text" id="dsb-input-panel-text0"><span style="color: #666666;">This
 contest is open for practice.  You can try every problem as many times 
as you like, though we won't keep track of which problems you solve.  
Read the <a href="http://code.google.com/codejam/quickstart.html" target="_blank">Quick-Start Guide</a> to get started.</span></div><table><tbody id="dsb-input-form-table0"><tr><td class="dsb-input-table-description">Small input<br>9 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap0-0"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper0-0"><button style="display: inline;" id="dsb-input-start-button0-0" class="dsb-input-start-button">Solve A-small</button><span style="display: none;" id="dsb-input-link-plain0-0" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text0-0" class="dsb-input-link-text">Download A-small-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption0-0" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption0-0" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link0-0">resubmit</span> for <span id="dsb-resubmit-timer0-0"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link0-0">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div0-0" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_0"></span>&nbsp;&nbsp;</div><div style="display:none"><b>Input:</b> A-small-practice.in.</div><form id="submit-formio_timer_0" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_0" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_0"><div id="input-file-divio_timer_0-0"><span id="source-fileio_timer_0-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_0-0">remove</span></div></div><span id="add-source-fileio_timer_0" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_0" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_0" value="Hide" type="button"></div><div id="source-file-namesio_timer_0"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="599117" type="hidden"><input name="input_id" value="0" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_0" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr><tr><td class="dsb-input-table-description">Large input<br>13 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap0-1"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper0-1"><button style="display: inline;" id="dsb-input-start-button0-1" class="dsb-input-start-button">Solve A-large</button><span style="display: none;" id="dsb-input-link-plain0-1" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text0-1" class="dsb-input-link-text">Download A-large-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption0-1" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption0-1" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link0-1">resubmit</span> for <span id="dsb-resubmit-timer0-1"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link0-1">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div0-1" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_1"></span>&nbsp;&nbsp;</div><div style="display:none">You may resubmit this multiple times within the remaining time-frame. Only your last submission will count.</div><form id="submit-formio_timer_1" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_1" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_1"><div id="input-file-divio_timer_1-0"><span id="source-fileio_timer_1-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_1-0">remove</span></div></div><span id="add-source-fileio_timer_1" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_1" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_1" value="Hide" type="button"></div><div id="source-file-namesio_timer_1"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="599117" type="hidden"><input name="input_id" value="1" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_1" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr></tbody></table><!-- Problem Statement --><div id="dsb-problem-content-div0" class="dsb-problem-content-div"><h3>Problem</h3>
<p>
A company is located in two very tall buildings. The company intranet 
connecting the buildings consists of many wires, each connecting a 
window on the first building to a window on the second building.</p>
<p>You are looking at those buildings from the side, so that one of the 
buildings is to the left and one is to the right. The windows on the 
left building are seen as points on its right wall, and the windows on 
the right building are seen as points on its left wall. Wires are 
straight segments connecting a window on the left building to a window 
on the right building.</p>
<p><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/a.png"></p>
<p>You've noticed that no two wires share an endpoint (in other words, 
there's at most one wire going out of each window). However, from your 
viewpoint, some of the wires intersect midway. You've also noticed that 
exactly two wires meet at each intersection point.</p>
<p>On the above picture, the intersection points are the black circles, while the windows are the white circles.</p>
<p>How many intersection points do you see?</p>

<h3>Input</h3>
<p>
The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each case begins with a line containing an integer <b>N</b>, denoting the number of wires you see.
</p>

<p>
The next <b>N</b> lines each describe one wire with two integers <b>A<sub>i</sub></b> and <b>B<sub>i</sub></b>. These describe the windows that this wire connects: <b>A<sub>i</sub></b> is the height of the window on the left building, and <b>B<sub>i</sub></b> is the height of the window on the right building.
</p>

<h3>Output</h3>
<p>
For each test case, output one line containing "Case #x: y", where x is 
the case number (starting from 1) and y is the number of intersection 
points you see.
</p>

<h3>Limits</h3>
<p>
1 ≤ <b>T</b> ≤ 15.<br>
1 ≤ <b>A<sub>i</sub></b> ≤ 10<sup>4</sup>.<br>
1 ≤ <b>B<sub>i</sub></b> ≤ 10<sup>4</sup>.<br>
Within each test case, all <b>A<sub>i</sub></b> are different.<br>
Within each test case, all <b>B<sub>i</sub></b> are different.<br>
No three wires intersect at the same point.
</p>

<h4>Small dataset</h4>
<p>
1 ≤ <b>N</b> ≤ 2.
</p>

<h4>Large dataset</h4>
<p>
1 ≤ <b>N</b> ≤ 1000.
</p>

<h3>Sample</h3>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="io-table-header">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="io-table-header">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
2<br>
3<br>
1 10<br>
5 5<br>
7 7<br>
2<br>
1 1<br>
2 2<br>
</code>
</td>
<td>
<code>
Case #1: 2<br>
Case #2: 0<br>
<br>
</code>
</td></tr></tbody></table>
</div>
</div></div><div class="dsb-content-pages" id="dsb-problem-page1"><!-- Problem Input File Selection --><div class="dsb-input-panel-text" id="dsb-input-panel-text1"><span style="color: #666666;">This
 contest is open for practice.  You can try every problem as many times 
as you like, though we won't keep track of which problems you solve.  
Read the <a href="http://code.google.com/codejam/quickstart.html" target="_blank">Quick-Start Guide</a> to get started.</span></div><table><tbody id="dsb-input-form-table1"><tr><td class="dsb-input-table-description">Small input<br>14 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap1-0"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper1-0"><button style="display: inline;" id="dsb-input-start-button1-0" class="dsb-input-start-button">Solve B-small</button><span style="display: none;" id="dsb-input-link-plain1-0" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text1-0" class="dsb-input-link-text">Download B-small-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption1-0" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption1-0" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link1-0">resubmit</span> for <span id="dsb-resubmit-timer1-0"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link1-0">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div1-0" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_2"></span>&nbsp;&nbsp;</div><div style="display:none"><b>Input:</b> B-small-practice.in.</div><form id="submit-formio_timer_2" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_2" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_2"><div id="input-file-divio_timer_2-0"><span id="source-fileio_timer_2-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_2-0">remove</span></div></div><span id="add-source-fileio_timer_2" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_2" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_2" value="Hide" type="button"></div><div id="source-file-namesio_timer_2"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="551112" type="hidden"><input name="input_id" value="0" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_2" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr><tr><td class="dsb-input-table-description">Large input<br>22 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap1-1"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper1-1"><button style="display: inline;" id="dsb-input-start-button1-1" class="dsb-input-start-button">Solve B-large</button><span style="display: none;" id="dsb-input-link-plain1-1" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text1-1" class="dsb-input-link-text">Download B-large-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption1-1" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption1-1" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link1-1">resubmit</span> for <span id="dsb-resubmit-timer1-1"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link1-1">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div1-1" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_3"></span>&nbsp;&nbsp;</div><div style="display:none">You may resubmit this multiple times within the remaining time-frame. Only your last submission will count.</div><form id="submit-formio_timer_3" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_3" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_3"><div id="input-file-divio_timer_3-0"><span id="source-fileio_timer_3-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_3-0">remove</span></div></div><span id="add-source-fileio_timer_3" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_3" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_3" value="Hide" type="button"></div><div id="source-file-namesio_timer_3"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="551112" type="hidden"><input name="input_id" value="1" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_3" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr></tbody></table><!-- Problem Statement --><div id="dsb-problem-content-div1" class="dsb-problem-content-div"><h3>Problem</h3>
<p>
Now that you have won Code Jam and been hired by Google as a software 
engineer, you have been assigned to work on their wildly popular 
programming contest website.  
</p>
<p>
Google is expecting a lot of participants (<b>P</b>) in Code Jam next 
year, and they want to make sure that the site can support that many 
people at the same time.  During Code Jam 2010 you learned that the site
 could support at least <b>L</b> people at a time without any errors, but you also know that the site can't yet support <b>P</b> people.
</p>
<p>
To determine how many more machines you'll need, you want to know within a factor of <b>C</b> how many people the site can support.  This means that there is an integer <b>a</b> such that you know the site can support <b>a</b> people, but you know the site can't support <b>a</b> * <b>C</b> people.
</p>
<p>
You can run a series of <i>load tests</i>, each of which will determine whether the site can support at least <b>X</b> people for some integer value of <b>X</b>
 that you choose.  If you pick an optimal strategy, choosing what tests 
to run based on the results of previous tests, how many load tests do 
you need in the worst case?
</p>

<h3>Input</h3>
<p>
The first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines follow, each of which contains space-separated integers <b>L</b>, <b>P</b> and <b>C</b> in that order.
</p>

<h3>Output</h3>
<p>
For each test case, output one line containing "Case #x: y", where x is 
the case number (starting from 1) and y is the number of load tests you 
need to run in the worst case before knowing within a factor of <b>C</b> how many people the site can support.
</p>

<h3>Limits</h3>
<p>
1 ≤ <b>T</b> ≤ 1000.<br>
2 ≤ <b>C</b> ≤ 10.<br>
<b>L</b>, <b>P</b> and <b>C</b> are all integers.
</p>

<h4>Small dataset</h4>
<p>
1 ≤ <b>L</b> &lt; <b>P</b> ≤ 10<sup>3</sup>.
</p>

<h4>Large dataset</h4>
<p>
1 ≤ <b>L</b> &lt; <b>P</b> ≤ 10<sup>9</sup>.
</p>

<h3>Sample</h3>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="io-table-header">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="io-table-header">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
4<br>
50 700 2<br>
19 57 3<br>
1 1000 2<br>
24 97 2<br>
</code>
</td>
<td>
<code>
Case #1: 2<br>
Case #2: 0<br>
Case #3: 4<br>
Case #4: 2<br>
<br>
</code>
</td></tr></tbody></table>
</div>

<h4>Explanation</h4>
<p>
In Case #2, we already know that the site can support between 19 and 57 
people.  Since those are a factor of 3 apart, we don't need to do any 
testing.
</p>
<p>
In Case #4, we can test 48; but if the site can support 48 people, we 
need more testing, because 48*2 &lt; 97.  We could test 49; but if the 
site can't support 49 people, we need more testing, because 24 * 2 &lt; 
49.  So we need two tests.
</p> </div></div><div class="dsb-content-pages" id="dsb-problem-page2"><!-- Problem Input File Selection --><div class="dsb-input-panel-text" id="dsb-input-panel-text2"><span style="color: #666666;">This
 contest is open for practice.  You can try every problem as many times 
as you like, though we won't keep track of which problems you solve.  
Read the <a href="http://code.google.com/codejam/quickstart.html" target="_blank">Quick-Start Guide</a> to get started.</span></div><table><tbody id="dsb-input-form-table2"><tr><td class="dsb-input-table-description">Small input<br>18 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap2-0"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper2-0"><button style="display: inline;" id="dsb-input-start-button2-0" class="dsb-input-start-button">Solve C-small</button><span style="display: none;" id="dsb-input-link-plain2-0" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text2-0" class="dsb-input-link-text">Download C-small-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption2-0" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption2-0" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link2-0">resubmit</span> for <span id="dsb-resubmit-timer2-0"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link2-0">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div2-0" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_4"></span>&nbsp;&nbsp;</div><div style="display:none"><b>Input:</b> C-small-practice.in.</div><form id="submit-formio_timer_4" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_4" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_4"><div id="input-file-divio_timer_4-0"><span id="source-fileio_timer_4-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_4-0">remove</span></div></div><span id="add-source-fileio_timer_4" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_4" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_4" value="Hide" type="button"></div><div id="source-file-namesio_timer_4"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="563116" type="hidden"><input name="input_id" value="0" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_4" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr><tr><td class="dsb-input-table-description">Large input<br>24 points</td><td class="dsb-input-table-linktd"><div class="" id="dsb-action-box-wrap2-1"><div style="display: inline;" class="dsb-input-wrapper" id="dsb-input-wrapper2-1"><button style="display: inline;" id="dsb-input-start-button2-1" class="dsb-input-start-button">Solve C-large</button><span style="display: none;" id="dsb-input-link-plain2-1" class="dsb-input-link-span"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/file.gif" class="dsb-input-link-img"><span id="dsb-input-link-plain-text2-1" class="dsb-input-link-text">Download C-large-practice.in</span></span></div><span style="display: none;" id="dsb-input-table-caption2-1" class="dsb-input-table-caption"></span><span style="display: none;" id="dsb-resubmit-caption2-1" class="dsb-input-table-caption">Your submission was received. You can still <span class="dsb-input-link-text" id="dsb-resubmit-link2-1">resubmit</span> for <span id="dsb-resubmit-timer2-1"></span>.<br>Only your last submission counts. <span class="dsb-input-link-text" id="dsb-resubmit-view-sub-link2-1">View your last submission</span>.</span><div><div style="display: none;" id="dsb-submit-form-div2-1" class="dsb-submit-form-div"><div style="display:none"><b>Time Remaining:</b> <span id="io_timer_5"></span>&nbsp;&nbsp;</div><div style="display:none">You may resubmit this multiple times within the remaining time-frame. Only your last submission will count.</div><form id="submit-formio_timer_5" action="/codejam/contest/619102/dashboard/do" enctype="multipart/form-data" method="post"><input name="csrfmiddlewaretoken" value="YzQyN2JkOTVlMjgwNzY1YjA4YjVmNmJmY2NhZGNhYjJ8fDEzOTM5NDU0NDYxMTU5MzM=" type="hidden"><div class="dsb-submit-form-separator">your output file:<input id="output-fileio_timer_5" name="answer" class="submitFormFile" type="file"></div><div style="display: none"><table class="dsb-source-code-table"><tbody><tr><td style="padding:0.4em 0.2em 0 0">source code:&nbsp;&nbsp;</td><td><div id="source-filesio_timer_5"><div id="input-file-divio_timer_5-0"><span id="source-fileio_timer_5-0"><input class="submitFormFile" name="source-file0" type="file"></span><span style="visibility: hidden;" class="dsb-submit-form-links" id="remove-source-fileio_timer_5-0">remove</span></div></div><span id="add-source-fileio_timer_5" class="dsb-submit-form-links">Add another file</span></td></tr></tbody></table></div><div class="dsb-submit-form-separator" style="color:gray">source file(s): &nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div class="dsb-submit-form-separator" style="text-align:center"><input id="submit-buttonio_timer_5" value="Submit file" type="button">&nbsp;&nbsp;<input id="dsb-hide-submissionio_timer_5" value="Hide" type="button"></div><div id="source-file-namesio_timer_5"></div><input name="cmd" value="SubmitAnswer" type="hidden"><input name="problem" value="563116" type="hidden"><input name="input_id" value="1" type="hidden"><input name="num_source_files" id="num-source-filesio_timer_5" value="1" type="hidden"><input name="agent" value="website" type="hidden"></form></div></div></div></td></tr></tbody></table><!-- Problem Statement --><div id="dsb-problem-content-div2" class="dsb-problem-content-div"><h3>Problem</h3>
<p>
The chess board industry has fallen on hard times and needs your help. 
It is a little-known fact that chess boards are made from the bark of 
the extremely rare Croatian Chess Board tree, (<i>Biggus Mobydiccus</i>).
 The bark of that tree is stripped and unwrapped into a huge rectangular
 sheet of chess board material. The rectangle is a grid of black and 
white squares.
</p>

<p>
Your task is to make as many large square chess boards as possible. A 
chess board is a piece of the bark that is a square, with sides parallel
 to the sides of the bark rectangle, with cells colored in the pattern 
of a chess board (no two cells of the same color can share an edge).
</p>

<p>
Each time you cut out a chess board, you must choose the largest 
possible chess board left in the sheet.  If there are several such 
boards, pick the topmost one. If there is still a tie, pick the leftmost
 one.  Continue cutting out chess boards until there is no bark left. 
You may need to go as far as cutting out 1-by-1 mini chess boards.
</p>

<p>
Here is an example showing the bark of a Chess Board tree and the first few chess boards that will be cut out of it.
</p>
<img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/a_002.png">

<h3>Input</h3>
<p>
The first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.  Each one starts with a line containing the dimensions of the bark grid, <b>M</b> and <b>N</b>. <b>N</b> will always be a multiple of 4. The next <b>M</b> lines will each contain an (<b>N</b>/4)-character
 hexadecimal integer, representing a row of the bark grid. The binary 
representation of these integers will give you a strings of <b>N</b> 
bits, one for each row. Zeros represent black squares; ones represent 
white squares of the grid.  The rows are given in the input from top to 
bottom. In each row, the most-significant bit of the hexadecimal integer
 corresponds to the leftmost cell in that row.
</p>

<h3>Output</h3>
<p>
For each test case, output one line containing "Case #x: <b>K</b>", where x is the case number (starting from 1) and <b>K</b> is the number of different chess board sizes that you can cut out by following the procedure described above. The next <b>K</b>
 lines should contain two integers each -- the size of the chess board 
(from largest to smallest) and the number of chess boards of that size 
that you can cut out.
</p>

<h3>Limits</h3>
<p>
1 ≤ <b>T</b> ≤ 100;<br>
<b>N</b> will be divisible by 4;<br>
Each hexadecimal integer will contain exactly <b>N</b>/4 characters.<br>
Only the characters 0-9 and A-F will be used.
</p>

<h4>Small dataset</h4>
<p>
1 ≤ <b>M</b> ≤ 32;<br>
1 ≤ <b>N</b> ≤ 32.
</p>

<h4>Large dataset</h4>
<p>
1 ≤ <b>M</b> ≤ 512;<br>
1 ≤ <b>N</b> ≤ 512;<br>
The input file will be at most 200kB in size.
</p>

<h3>Sample</h3>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="io-table-header">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="io-table-header">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
4<br>
15 20<br>
55555<br>
FFAAA<br>
2AAD5<br>
D552A<br>
2AAD5<br>
D542A<br>
4AD4D<br>
B52B2<br>
52AAD<br>
AD552<br>
AA52D<br>
AAAAA<br>
5AA55<br>
A55AA<br>
5AA55<br>
4 4<br>
0<br>
0<br>
0<br>
0<br>
4 4<br>
3<br>
3<br>
C<br>
C<br>
4 4<br>
6<br>
9<br>
9<br>
6<br>
</code>
</td>
<td>
<code>
Case #1: 5<br>
6 2<br>
4 3<br>
3 7<br>
2 15<br>
1 57<br>
Case #2: 1<br>
1 16<br>
Case #3: 2<br>
2 1<br>
1 12<br>
Case #4: 1<br>
2 4<br>
<br>
</code>
</td></tr></tbody></table>
</div>

<p>The first example test case represents the image above.</p></div></div></div>

    <div id="dsb-analysis-page" class="dsb-content-pages"><div id="dsb-analysis-selections"><span id="dsb-analysis-selection-p3" class="dsb-analysis-selected">Overview</span>&nbsp; | &nbsp;<span id="dsb-analysis-selection-p0" class="dsb-analysis-not-selected">Problem A</span>&nbsp; | &nbsp;<span id="dsb-analysis-selection-p1" class="dsb-analysis-not-selected">Problem B</span>&nbsp; | &nbsp;<span id="dsb-analysis-selection-p2" class="dsb-analysis-not-selected">Problem C</span></div><div class="dsb-problem-content-div" id="dsb-problem-analysis-div3"><p>
This last sub-round of round 1 saw the largest number of contestants and
 the largest amount of controversy. Problem A was about permutations 
masquerading as a geometry problem. Problem B was a crazy twist on 
Binary Search. And Problem C was a combination of parsing, dynamic 
programming and clever trickery.
</p>
<p>
<i>Load Testing</i> turned out to be the most unusual problem. We 
received dozens of requests for additional hints and explanations of 
sample test cases. It was a challenge for the judges to explain the 
problem as clearly as possible while remaining fair to all contestants. 
If our responses seemed harsh and unhelpful at times, please know that 
we tried our best to remain as fair as possible. Perhaps the analysis of
 Problem B can help clear up any remaining confusion.
</p>
<p>
ZhukovDmitry finished all 3 problems in just over 38 minutes, closely 
followed by darnley, who was only 22 seconds behind. aytawgf took the 
third place in just under one hour of total time.
</p>
<p>
Congratulations to the 3000 contestants who have advanced to Round 2.
</p>

<h3>Cast</h3>
<p>Problem A. <i>Rope Intranet</i> Written by Cosmin Negruseri. Prepared by Petr Mitrichev.</p>
<p>Problem B. <i>Load Testing</i> Written by Bartholomew Furrow. Prepared by Petr Mitrichev and Bartholomew Furrow.</p>
<p>Problem C. <i>Making Chess Boards</i> Written and prepared by Igor Naverniouk.</p>
<p>Contest analysis presented by Petr Mitrichev, Igor Naverniouk, and Cosmin Negruseri.</p>
<p>Solutions and other problem preparation provided by David Arthur, Xiaomin Chen, Ante Derek, and John Dethridge.</p>
<p>
And a special thanks to Martin Gardner, whose books have inspired and educated many of us.
</p>
</div><div style="display: none;" class="dsb-problem-content-div" id="dsb-problem-analysis-div0"><p>
This problem was easier than it could have been, since the constraints 
don't require you to write an efficient solution. To solve it you can 
simply iterate through each pair of ropes and test if they intersect. 
Checking for intersection can be done in various ways. One way is to 
write the two line equations and then solve a system of linear equations
 with two variables to find the intersection point. An easier solution 
is to simply check if the order of the ends of the pair of ropes on the 
first building is the opposite of the order of the ends of the ropes on 
the second building. This translates to the code:
</p><pre>(A[i] - A[j]) * (B[i] - B[j]) &lt; 0
</pre>
This algorithm takes <i>O(n<sup>2</sup>)</i> and it's fast enough to solve our problem.
<p></p>
<p>
This problem is very similar to the classic one which asks for the 
number of inversions within a given permutation. An inversion for a 
permutation <i>p</i> is a pair of two indexes <i>i &lt; j</i> such that <i>p<sub>i</sub> &gt; p<sub>j</sub></i>. Let's see why these problems are equivalent. If <i>ra</i> is the rank of <i>A[i]</i> when we sort <i>A</i> and <i>rb</i> is the rank of <i>B[i]</i> when we sort <i>B</i>, then the ropes problem becomes the inversion count problem on the permutation <i>p</i> where <i>p<sub>ra</sub> = rb</i> for each <i>i</i>.
</p>
<p>
This new problem is a good application for divide and conquer algorithms, and can be solved in <i>O(n log n)</i>
 time. Merge sort can be adapted nicely to not only sort an array, but 
count the number of inversions as well. Other solutions use data 
structures like segment trees, augmented balanced binary search trees or
 augmented skip lists.</p>

<a href="http://www.google.com/search?q=number+of+inversions+in+a+permutation" target="_blank">Number of inversions in a permutation</a></div><div style="display: none;" class="dsb-problem-content-div" id="dsb-problem-analysis-div1"><h3>Understanding the sample cases</h3>
<p>In order to solve this problem, one first needs to get a feeling of 
what's asked, and looking at the sample cases is a good way to achieve 
that.</p>
<p>Take a look at the first sample case. The answer given is 2. How do 
we achieve the result with just 2 loadtests? Let's make a couple 
guesses. Suppose we do a loadtest that checks if the site supports 100 
users. If we learn that the site can't support 100 users, then we're 
done: we know we can support 50 users but can't support 100 which is 
50*2. However, if we learn that the site can actually support 100 users,
 we have a very difficult task at hand now: we have only one loadtest 
left, and we know that the site can support 100 users but can't support 
700. Is it possible to solve it?</p>
<p>Suppose we now loadtest to check if the site supports 300 users. If 
we learn that the site can't support 300 users, then we've failed to 
solve the problem: we know we can support 100, but can't support 300 - 
but 300 is more than 100*2, so we don't have enough knowledge. Moreover,
 this actually helps us to prove that our loadtest must test for 200 
users or less, otherwise we will hit the same issue.</p>
<p>Now we know that our second loadtest must use at most 200 users. But 
even when it's exactly 200, suppose we learn that our site can actually 
support all of them. Then we've failed to solve the problem again: we 
know we can support 200, but can't support 700 - but 700 is more than 
200*2.</p>
<p>So there's no good choice for our second loadtest. It means that the 
choice of the first loadtest was wrong - 100 users is too small for it.</p>
<h3>What have we learned?</h3>
<p>However, we've learned an important lesson in our failed attempt to 
understand the example case: when we have only one loadtest left, and we
 know that the site can support <b>L</b> people but can't support <b>P</b> people, we must loadtest with such number <b>X</b> that <b>L</b>*<b>C</b>&gt;=<b>X</b>, and at the same time <b>X</b>*<b>C</b>&gt;=<b>P</b>.
 The first inequality will help us solve the problem when the loadtest 
fails, and the second one is helpful if the loadtest succeeds.</p>
<p>Since there's no such number <b>X</b> for <b>L</b>=100, <b>P</b>=700, <b>C</b>=2, our first attempt above has failed.</p>
<p>The question now is: how to check if such <b>X</b> exists? From the first equation, we get <b>X</b>&lt;=<b>L</b>*<b>C</b>. From the second one, we get <b>X</b>&gt;=<b>P</b>/<b>C</b>. Such <b>X</b> exists if and only if <b>L</b>*<b>C</b>&gt;=<b>P</b>/<b>C</b>, which means <b>L</b>*<b>C</b><sup>2</sup>&gt;=<b>P</b>. Forgetting the formulas, the upper bound of our range should be at most <b>C</b><sup>2</sup> times more than the lower bound. In that case, we can just take <b>X</b>=<b>L</b>*<b>C</b> for our only loadtest.</p>
<h3>The second attempt at understanding the first sample case</h3>
<p>Equipped with this knowledge, we get back to the first sample case. 100 was wrong since 100*2<sup>2</sup>=100*4&lt;700.
 Maybe we should loadtest for 300 people first? If the loadtest 
succeeds, then we will have one loadtest left, 300 people OK, 700 people
 not OK, and since 300*4&gt;=700, we can solve the problem. However, 
what if the loadtest doesn't succeed? We know that our system can 
support 50 people but can't support 300 people and have only one 
loadtest left. Since 50*4&lt;300, we can't do that. So the choice of 300
 was also wrong.</p>
<p>What if we try 200 as the first loadtest? In case it succeeds, we get
 one loadtest, 200 OK, 700 not OK, 200*4&gt;=700 - we can do that. In 
case it fails, we get 50 OK, 200 not OK, 50*4&gt;=200 - we can do that 
as well. So we've finally figured out the algorithm to solve the first 
sample case using just 2 loadtests:</p>
<pre>Loadtest for 200 people. If the site can support 200 people:
  Loadtest for 400 people.
If the site can't support 200 people:
  Loadtest for 100 people.</pre>
<h3>What have we learned?</h3>
<p>So how do we figure out if two loadtests are enough? This is actually
 surprisingly similar to the study of the one loadtest case.</p>
<p>When we have two loadtests left, and we know that the site can support <b>L</b> people but can't support <b>P</b> people, we must loadtest with such number <b>X</b> that <b>L</b>*<b>C</b><sup>2</sup>&gt;=<b>X</b>, and at the same time <b>X</b>*<b>C</b><sup>2</sup>&gt;=<b>P</b>.
 The first inequality will help us solve the problem using one remaining
 loadtest when the loadtest fails, and the second one is helpful if the 
loadtest succeeds. 
</p><p>Using the same argument as above, one can see that such number <b>X</b> exists if and only if <b>L</b>*<b>C</b><sup>4</sup>&gt;=<b>P</b> (we got <b>C</b><sup>4</sup> as <b>C</b><sup>2</sup>*<b>C</b><sup>2</sup>).</p>
<h3>More loadtests?</h3>
<p>Now it's not so hard to figure out what happens with more than two 
loadtests. It's possible to solve the problem using three loadtests if 
and only if <b>L</b>*<b>C</b><sup>8</sup>&gt;=<b>P</b>. For four loadtests, we get <b>L</b>*<b>C</b><sup>16</sup>&gt;=<b>P</b>. And so on. That pretty much describes the solution for this problem.
</p><h3>Understanding the sample cases, attempt 3</h3>
<p>Now we can finally figure out the algorithm to solve the third sample case:  <b>L</b>=1, <b>P</b>=1000, <b>C</b>=2. In order to do this in four loadtests, our first loadtest can be for <b>L</b>*<b>C</b><sup>8</sup>=256:</p>
<pre>Loadtest for 256 people. If the site can support them:
  Loadtest for 512 people.
If we can't support 256 people:
  Loadtest for 16 people. If the site can support them:
    Loadtest for 64 people. If the site can support them:
      Loadtest for 128 people.
    If we can't support 64 people:
      Loadtest for 32 people.
  If we can't support 16 people:
    Loadtest for 4 people. If the site can support them:
      Loadtest for 8 people.
    If we can't support 4 people:
      Loadtest for 2 people.</pre>
<p>This looks quite similar to the binary search algorithm, but performed on exponential scale.</p>
<h3>Conclusion</h3>
<p>We started solving this problem by trying to understand the answers 
for the sample cases, and by the time we actually understood them, we 
already have a complete solution. The only remaining thing is to 
implement the solution carefully avoiding the integer overflow issues.</p>
</div><div style="display: none;" class="dsb-problem-content-div" id="dsb-problem-analysis-div2"><h3>Finding the largest chess board</h3>
<p>
First, we need a quick way to find the largest chess board. There is 
classic dynamic programming trick that goes like this. Let's compute, 
for each cell <nobr>(i, j)</nobr>, the size of the largest square whose bottom-right corner is <nobr>(i, j)</nobr>.
 Let's call this value larg[i][j]. It is easy to compute larg[i][0] and 
larg[0][j] -- they are always 1. For any other cell, the value of 
larg[i][j] is always at least 1, and it is larger only if the following 
condition holds:
</p><pre>  if (board[i - 1][j] != board[i][j] &amp;&amp;
      board[i][j - 1] != board[i][j] &amp;&amp;
      board[i - 1][j - 1] == board[i][j]) {
    larg[i][j] = 1 + min(larg[i - 1][j],
                         larg[i][j - 1],
                         larg[i - 1][j - 1]);
  }
</pre>
In a single, linear-time, row-by-row scan, we can compute the values of larg[][] for all cells.
<p></p>

<h3>Finding the chess board to remove</h3>
<p>
Now that we have larg[][], it is very easy to find the first chess board
 that we should cut out. Its bottom-right corner is in the cell that has
 the largest possible value in larg[][]. If there are several such 
cells, we use the tie-breaking rules described in the problem and choose
 the one that comes first in lexicographic order of <nobr>(i, j)</nobr>.
</p>
<p>
We can do this in linear time by scanning larg[][], but since we will 
have to do this many times, it is better to make a heap of triples of 
the form
</p><pre>  (-larg[i][j], i, j)
</pre>
and take the smallest element from that heap. This way, we are sorting 
all cells by decreasing size, then by increasing row, then by increasing
 column. As long as we can update this heap efficiently after cutting 
out a chess board, we can always retrieve the smallest element in <nobr>O(log(m*n))</nobr> time. We could also use a balanced binary search tree instead of a heap.
<p></p>

<h3>Removing the chess board and updating larg[][]</h3>
<p>
Consider removing the first 6x6 chess board from the example input 
described in the problem statement. How should we update larg[][]? First
 of all, we can fill the 6x6 square of cells with zeros because there 
are no more chess boards to be removed from those locations. But that is
 not all. There are other cells that might need to be updated. Where are
 they, and how many of them are there?
</p>
<p>
Naively, we can simply recompute the values of all non-zero cells in larg[][] and continue. If we do that, we will have a <nobr>O(m<sup>2</sup>*n<sup>2</sup>)</nobr> algorithm, which is too slow.
</p>
<p>
First of all, notice that we do not need to update rows above or to the 
left of the 6x6 square. Any square chess boards whose bottom-right 
corners are in those areas still exist and can be cut out later. The 
only chess boards that we need to worry about are those that overlap the
 6x6 board that we have just removed. Also, notice that we have just 
removed the largest possible chess board, so we only need to care about 
remaining boards of size 6 or smaller. Where can their bottom-right 
corners lie in order for those boards to overlap <i>our</i> board? They must be in the 12x12 square whose center is at <nobr>(i, j)</nobr> -- the bottom-right corner of our board.
</p>
<p>
That's an area of size <nobr>4*6<sup>2</sup></nobr>. In fact, whenever we remove a board of size k-by-k, we only need to update an area of larg[][] of size at most <nobr>2k-by-2k</nobr>. Since we can only remove each cell at most once, all of the updating work requires linear time in total; <nobr>4*m*n</nobr> updates, to be precise.
</p>

<h3>Updating the heap</h3>
<p>
Each time we update larg[][], we must also update the heap that lets us 
find the next board to remove. This means finding and removing an old 
entry, as well as inserting a new entry. With pointers from cells to 
heap elements, or by using a balanced binary search tree, both steps can
 be done in <nobr>O(m*n)</nobr> time.
</p>
<p>
In total, this algorithm runs in <nobr>O(n*m*log(n*m))</nobr> time, which is plenty fast for the problem's constraints.
</p></div></div>

    <div id="dsb-clarification-page" class="dsb-content-pages">
      <!-- The clarifications table -->
      <div id="clarTableDiv" class="clarTableWrapper"></div><div>
        <table style="display: none;" id="dsb-clarification-table">
          <colgroup span="9">
            <col width="16%"><col width="2%">
            <col width="10%"><col width="2%">
            <col width="28%"><col width="2%">
            <col width="10%"><col width="2%">
            <col width="28%">
          </colgroup>
          <thead>
            <tr>
            <th>Category</th><th>&nbsp;</th>
            <th class="clarTimeColumn">Asked</th><th>&nbsp;</th>
            <th>Question</th><th>&nbsp;</th>
            <th class="clarTimeColumn">Answered</th><th>&nbsp;</th>
            <th>Answer</th>
            </tr>
          </thead>
          <tbody id="dsb-clarification-tbody"></tbody>
        </table>
      </div>
      <div style="display: none;" id="dsb-submit-clarification">
        <!-- The link to ask a clarification -->
        <div style="padding: 0.5em 0 0.3em 0;">
          <b>Ask a question:</b>
        </div>
        <!-- The form for asking clarification -->
        <div>
          <form onsubmit="return GCJ.submitClarification(this);"><div style="display:none;"><input name="csrfmiddlewaretoken" value="YzE0ODExNmRlZWE1ZThiYjc4NjA0OWQ1YTlhMTAxMWV8fDEzOTM5NDU0NDQ2NjY2NTk=" type="hidden"></div>
            <div><textarea rows="5" cols="60" name="q"></textarea></div>
            <div style="padding-top: 0.3em">
              <select id="dsb-clarification-problem-select" name="problem">
                <option value="_" selected="selected">[General]</option>
              <option value="599117">A. Rope Intranet</option><option value="551112">B. Load Testing</option><option value="563116">C. Making Chess Boards</option></select>
              &nbsp;
              <input id="dsb-submit-clarification-button" value="Ask" type="submit">
            </div>
          </form>
        </div>
      </div>
      <!-- Too many pending clarifications -->
      <div id="dsb-cannot-ask-question-text" style="font-weight: bold; padding: 0.5em 0px 0.3em; display: block;">You cannot ask questions at this time. Please email us at codejam@google.com.</div>

    </div>

    <div id="dsb-submissions-page" class="dsb-content-pages">
      <div id="dsb-submissions-status" class="dsb-sub-status-msg">
        You have 0 submissions.
      </div>
      <table id="dsb-submissions-table" class="dsb-sub-main-table" style="display:none">
      <thead>
        <tr id="dsb-sub-main-table-header">
          <th class="dsb-sub-row-id-width">ID</th>
          <th class="dsb-sub-name-width">Problem</th>
          <th class="dsb-sub-difficulty-width">Size</th>
          <th class="dsb-sub-input-width">Input</th>
          <th class="dsb-sub-output-width">Output</th>
          <th class="dsb-sub-source-width">Solution</th>
          <th class="dsb-sub-status-width">Status</th>
          <th class="dsb-sub-time-width">Time</th>
        </tr>
      </thead>
      <tbody id="dsb-submissions-rows">
      </tbody>
      </table>
    </div>

  </div>
  </div>
</div>

</div>

<div style="height: 3em; clear: both;"></div>




<div id="footer">
  
  
  <p>
    
    All problem statements, input data and contest analyses are
    licensed under the
    <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution License</a>.
    
  </p>
  
  <span id="copyright">© 2008-2013 Google</span>
  <a href="http://www.google.com/">Google Home</a> -
  <a href="http://code.google.com/codejam/terms.html">Terms and Conditions</a> -
  <a href="http://www.google.com/intl/en/policies">Privacy Policies and Principles</a>
  <br><br>
  <a href="http://developers.google.com/appengine"><img src="Dashboard%20-%20Round%201C%202010%20-%20Google%20Code%20Jam_files/appengine-noborder-120x30.gif"></a>
  
</div>


<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-21302427-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script');
    ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
  })();
</script>



<div style="height: 1em">&nbsp;</div>

<script type="text/javascript">
GCJ.initHistory();
</script><input name="history_state0" id="history_state0" style="display:none" type="text">




</div></body></html>